//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from WALParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class WALParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RAW_BLOCK=1, Whitespace=2, NewLine=3, Semicolon=4, LeftParen=5, RightParen=6, 
		LeftBracket=7, RightBracket=8, LeftBrace=9, RightBrace=10, Assignment=11, 
		Comma=12, Not=13, Arrow=14, Colon=15, FunctionDeclare=16, SingleLineCommentStart=17, 
		MultiLineCommentStart=18, MultiLineCommentEnd=19, Comment=20, At=21, Hashtag=22, 
		Multiply=23, Plus=24, Minus=25, Divide=26, Power=27, Modulus=28, And=29, 
		Or=30, Xor=31, Greater=32, Lesser=33, GreaterOrEqual=34, LesserOrEqual=35, 
		Equal=36, NotEqual=37, AdditionAsignment=38, SubtractionAssignment=39, 
		MultiplicationAssignment=40, DivisionAssignment=41, ModulusAssignment=42, 
		Init=43, Unsafe=44, Global=45, If=46, Else=47, While=48, True=49, False=50, 
		Import=51, Return=52, Const=53, Boolean=54, Number=55, Identifier=56, 
		String=57, Any=58;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_functionCallStatement = 3, 
		RULE_functionDeclarationStatement = 4, RULE_assignmentStatement = 5, RULE_ifStatement = 6, 
		RULE_whileStatement = 7, RULE_elseIfStatement = 8, RULE_returnStatement = 9, 
		RULE_timedBlockStatement = 10, RULE_unsafeStatement = 11, RULE_importStatement = 12, 
		RULE_constantDeclarationStatement = 13, RULE_expression = 14, RULE_multiplyOperators = 15, 
		RULE_addOperators = 16, RULE_compareOperators = 17, RULE_booleanOperators = 18, 
		RULE_assignmentOperators = 19, RULE_block = 20, RULE_constant = 21, RULE_timeBlockEvent = 22, 
		RULE_comment = 23, RULE_unsafeBlock = 24, RULE_genericBlock = 25, RULE_expressionList = 26, 
		RULE_functionArgumentList = 27, RULE_functionArgument = 28;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "functionCallStatement", "functionDeclarationStatement", 
		"assignmentStatement", "ifStatement", "whileStatement", "elseIfStatement", 
		"returnStatement", "timedBlockStatement", "unsafeStatement", "importStatement", 
		"constantDeclarationStatement", "expression", "multiplyOperators", "addOperators", 
		"compareOperators", "booleanOperators", "assignmentOperators", "block", 
		"constant", "timeBlockEvent", "comment", "unsafeBlock", "genericBlock", 
		"expressionList", "functionArgumentList", "functionArgument"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"'='", "','", "'!'", "'->'", "':'", "'fn'", "'//'", "'/*'", "'*/'", null, 
		"'@'", "'#'", "'*'", "'+'", "'-'", "'/'", "'**'", "'%'", "'&&'", "'||'", 
		"'^'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'init'", null, null, null, "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RAW_BLOCK", "Whitespace", "NewLine", "Semicolon", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
		"Assignment", "Comma", "Not", "Arrow", "Colon", "FunctionDeclare", "SingleLineCommentStart", 
		"MultiLineCommentStart", "MultiLineCommentEnd", "Comment", "At", "Hashtag", 
		"Multiply", "Plus", "Minus", "Divide", "Power", "Modulus", "And", "Or", 
		"Xor", "Greater", "Lesser", "GreaterOrEqual", "LesserOrEqual", "Equal", 
		"NotEqual", "AdditionAsignment", "SubtractionAssignment", "MultiplicationAssignment", 
		"DivisionAssignment", "ModulusAssignment", "Init", "Unsafe", "Global", 
		"If", "Else", "While", "True", "False", "Import", "Return", "Const", "Boolean", 
		"Number", "Identifier", "String", "Any"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WALParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static WALParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WALParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WALParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(WALParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 286391992761524256L) != 0) {
				{
				{
				State = 58;
				line();
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimedBlockStatementContext timedBlockStatement() {
			return GetRuleContext<TimedBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsafeStatementContext unsafeStatement() {
			return GetRuleContext<UnsafeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationStatementContext functionDeclarationStatement() {
			return GetRuleContext<FunctionDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 66;
				statement();
				}
				break;
			case 2:
				{
				State = 67;
				timedBlockStatement();
				}
				break;
			case 3:
				{
				State = 68;
				unsafeStatement();
				}
				break;
			case 4:
				{
				State = 69;
				ifStatement();
				}
				break;
			case 5:
				{
				State = 70;
				functionDeclarationStatement();
				}
				break;
			case 6:
				{
				State = 71;
				whileStatement();
				}
				break;
			case 7:
				{
				State = 72;
				comment();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(WALParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationStatementContext constantDeclarationStatement() {
			return GetRuleContext<ConstantDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 75;
				assignmentStatement();
				}
				break;
			case 2:
				{
				State = 76;
				functionCallStatement();
				}
				break;
			case 3:
				{
				State = 77;
				returnStatement();
				}
				break;
			case 4:
				{
				State = 78;
				constantDeclarationStatement();
				}
				break;
			case 5:
				{
				State = 79;
				importStatement();
				}
				break;
			}
			State = 82;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(WALParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(WALParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(WALParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionCallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(Identifier);
			State = 85;
			Match(LeftParen);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 270215977692569632L) != 0) {
				{
				State = 86;
				expressionList();
				}
			}

			State = 89;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionDeclare() { return GetToken(WALParser.FunctionDeclare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(WALParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(WALParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(WALParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentListContext functionArgumentList() {
			return GetRuleContext<FunctionArgumentListContext>(0);
		}
		public FunctionDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationStatementContext functionDeclarationStatement() {
		FunctionDeclarationStatementContext _localctx = new FunctionDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(FunctionDeclare);
			State = 92;
			Match(Identifier);
			State = 93;
			Match(LeftParen);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 94;
				functionArgumentList();
				}
			}

			State = 97;
			Match(RightParen);
			State = 98;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(WALParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorsContext assignmentOperators() {
			return GetRuleContext<AssignmentOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(WALParser.Global, 0); }
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignmentStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Global) {
				{
				State = 100;
				Match(Global);
				}
			}

			State = 103;
			Match(Identifier);
			State = 104;
			assignmentOperators();
			State = 105;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(WALParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(WALParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(If);
			State = 108;
			expression(0);
			State = 109;
			block();
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 110;
				Match(Else);
				State = 111;
				elseIfStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(WALParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(While);
			State = 115;
			expression(0);
			State = 116;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_elseIfStatement);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				block();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(WALParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(Return);
			State = 123;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimedBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(WALParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(WALParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeBlockEventContext timeBlockEvent() {
			return GetRuleContext<TimeBlockEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public TimedBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timedBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterTimedBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitTimedBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimedBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimedBlockStatementContext timedBlockStatement() {
		TimedBlockStatementContext _localctx = new TimedBlockStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_timedBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 125;
				Match(Number);
				}
				break;
			case 2:
				{
				State = 126;
				timeBlockEvent();
				}
				break;
			case 3:
				{
				State = 127;
				expression(0);
				}
				break;
			}
			State = 130;
			Match(Colon);
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				{
				State = 131;
				block();
				}
				break;
			case Global:
			case Import:
			case Return:
			case Const:
			case Identifier:
				{
				State = 132;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsafeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsafeBlockContext unsafeBlock() {
			return GetRuleContext<UnsafeBlockContext>(0);
		}
		public UnsafeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsafeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterUnsafeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitUnsafeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsafeStatementContext unsafeStatement() {
		UnsafeStatementContext _localctx = new UnsafeStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_unsafeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			unsafeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(WALParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(WALParser.String, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(Import);
			State = 138;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(WALParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(WALParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(WALParser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterConstantDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitConstantDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationStatementContext constantDeclarationStatement() {
		ConstantDeclarationStatementContext _localctx = new ConstantDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_constantDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(Const);
			State = 141;
			Match(Identifier);
			State = 142;
			Match(Assignment);
			State = 143;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(WALParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(WALParser.RightParen, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(WALParser.Identifier, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanOperatorsContext booleanOperators() {
			return GetRuleContext<BooleanOperatorsContext>(0);
		}
		public BinaryBooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(WALParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryCompareExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorsContext compareOperators() {
			return GetRuleContext<CompareOperatorsContext>(0);
		}
		public BinaryCompareExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryMultiplyExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyOperatorsContext multiplyOperators() {
			return GetRuleContext<MultiplyOperatorsContext>(0);
		}
		public BinaryMultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryAddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorsContext addOperators() {
			return GetRuleContext<AddOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryAddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterUnaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitUnaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryAddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorsContext addOperators() {
			return GetRuleContext<AddOperatorsContext>(0);
		}
		public BinaryAddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 146;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 147;
				Match(Identifier);
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 148;
				functionCallStatement();
				}
				break;
			case 4:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149;
				Match(LeftParen);
				State = 150;
				expression(0);
				State = 151;
				Match(RightParen);
				}
				break;
			case 5:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 153;
				Match(Not);
				State = 154;
				expression(6);
				}
				break;
			case 6:
				{
				_localctx = new UnaryAddExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 155;
				addOperators();
				State = 156;
				expression(5);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 178;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 176;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new BinaryMultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 160;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 161;
						multiplyOperators();
						State = 162;
						expression(5);
						}
						break;
					case 2:
						{
						_localctx = new BinaryAddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 164;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 165;
						addOperators();
						State = 166;
						expression(4);
						}
						break;
					case 3:
						{
						_localctx = new BinaryCompareExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 168;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 169;
						compareOperators();
						State = 170;
						expression(3);
						}
						break;
					case 4:
						{
						_localctx = new BinaryBooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 172;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 173;
						booleanOperators();
						State = 174;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 180;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplyOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(WALParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(WALParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(WALParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(WALParser.Modulus, 0); }
		public MultiplyOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyOperatorsContext multiplyOperators() {
		MultiplyOperatorsContext _localctx = new MultiplyOperatorsContext(Context, State);
		EnterRule(_localctx, 30, RULE_multiplyOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 478150656L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(WALParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(WALParser.Minus, 0); }
		public AddOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOperatorsContext addOperators() {
		AddOperatorsContext _localctx = new AddOperatorsContext(Context, State);
		EnterRule(_localctx, 32, RULE_addOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			_la = TokenStream.LA(1);
			if ( !(_la==Plus || _la==Minus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(WALParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(WALParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(WALParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterOrEqual() { return GetToken(WALParser.GreaterOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lesser() { return GetToken(WALParser.Lesser, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LesserOrEqual() { return GetToken(WALParser.LesserOrEqual, 0); }
		public CompareOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorsContext compareOperators() {
		CompareOperatorsContext _localctx = new CompareOperatorsContext(Context, State);
		EnterRule(_localctx, 34, RULE_compareOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 270582939648L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(WALParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(WALParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Xor() { return GetToken(WALParser.Xor, 0); }
		public BooleanOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanOperatorsContext booleanOperators() {
		BooleanOperatorsContext _localctx = new BooleanOperatorsContext(Context, State);
		EnterRule(_localctx, 36, RULE_booleanOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 3758096384L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(WALParser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AdditionAsignment() { return GetToken(WALParser.AdditionAsignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SubtractionAssignment() { return GetToken(WALParser.SubtractionAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplicationAssignment() { return GetToken(WALParser.MultiplicationAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivisionAssignment() { return GetToken(WALParser.DivisionAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssignment() { return GetToken(WALParser.ModulusAssignment, 0); }
		public AssignmentOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorsContext assignmentOperators() {
		AssignmentOperatorsContext _localctx = new AssignmentOperatorsContext(Context, State);
		EnterRule(_localctx, 38, RULE_assignmentOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 8521215117312L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(WALParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(WALParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 40, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(LeftBrace);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 286391992761524256L) != 0) {
				{
				{
				State = 192;
				line();
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 198;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(WALParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(WALParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(WALParser.Boolean, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 42, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 198158383604301824L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeBlockEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Init() { return GetToken(WALParser.Init, 0); }
		public TimeBlockEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeBlockEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterTimeBlockEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitTimeBlockEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeBlockEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeBlockEventContext timeBlockEvent() {
		TimeBlockEventContext _localctx = new TimeBlockEventContext(Context, State);
		EnterRule(_localctx, 44, RULE_timeBlockEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(Init);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(WALParser.Comment, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 46, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(Comment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsafeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsafe() { return GetToken(WALParser.Unsafe, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericBlockContext genericBlock() {
			return GetRuleContext<GenericBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(WALParser.Global, 0); }
		public UnsafeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsafeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsafeBlockContext unsafeBlock() {
		UnsafeBlockContext _localctx = new UnsafeBlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_unsafeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Global) {
				{
				State = 206;
				Match(Global);
				}
			}

			State = 209;
			Match(Unsafe);
			State = 210;
			genericBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(WALParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(WALParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericBlockContext[] genericBlock() {
			return GetRuleContexts<GenericBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericBlockContext genericBlock(int i) {
			return GetRuleContext<GenericBlockContext>(i);
		}
		public GenericBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterGenericBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitGenericBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericBlockContext genericBlock() {
		GenericBlockContext _localctx = new GenericBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_genericBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(LeftBrace);
			State = 217;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					State = 215;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						State = 213;
						MatchWildcard();
						}
						break;
					case 2:
						{
						State = 214;
						genericBlock();
						}
						break;
					}
					} 
				}
				State = 219;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 220;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(WALParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(WALParser.Comma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 52, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			expression(0);
			State = 227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 223;
					Match(Comma);
					State = 224;
					expression(0);
					}
					} 
				}
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentContext[] functionArgument() {
			return GetRuleContexts<FunctionArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentContext functionArgument(int i) {
			return GetRuleContext<FunctionArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(WALParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(WALParser.Comma, i);
		}
		public FunctionArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterFunctionArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitFunctionArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentListContext functionArgumentList() {
		FunctionArgumentListContext _localctx = new FunctionArgumentListContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionArgumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			functionArgument();
			State = 235;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 231;
					Match(Comma);
					State = 232;
					functionArgument();
					}
					} 
				}
				State = 237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(WALParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(WALParser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FunctionArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.EnterFunctionArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWALParserListener typedListener = listener as IWALParserListener;
			if (typedListener != null) typedListener.ExitFunctionArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWALParserVisitor<TResult> typedVisitor = visitor as IWALParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentContext functionArgument() {
		FunctionArgumentContext _localctx = new FunctionArgumentContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(Identifier);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assignment) {
				{
				State = 239;
				Match(Assignment);
				State = 240;
				constant();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,58,244,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		1,0,5,0,60,8,0,10,0,12,0,63,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,
		1,74,8,1,1,2,1,2,1,2,1,2,1,2,3,2,81,8,2,1,2,1,2,1,3,1,3,1,3,3,3,88,8,3,
		1,3,1,3,1,4,1,4,1,4,1,4,3,4,96,8,4,1,4,1,4,1,4,1,5,3,5,102,8,5,1,5,1,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,113,8,6,1,7,1,7,1,7,1,7,1,8,1,8,3,8,121,
		8,8,1,9,1,9,1,9,1,10,1,10,1,10,3,10,129,8,10,1,10,1,10,1,10,3,10,134,8,
		10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,159,8,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		5,14,177,8,14,10,14,12,14,180,9,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
		1,18,1,19,1,19,1,20,1,20,5,20,194,8,20,10,20,12,20,197,9,20,1,20,1,20,
		1,21,1,21,1,22,1,22,1,23,1,23,1,24,3,24,208,8,24,1,24,1,24,1,24,1,25,1,
		25,1,25,5,25,216,8,25,10,25,12,25,219,9,25,1,25,1,25,1,26,1,26,1,26,5,
		26,226,8,26,10,26,12,26,229,9,26,1,27,1,27,1,27,5,27,234,8,27,10,27,12,
		27,237,9,27,1,28,1,28,1,28,3,28,242,8,28,1,28,3,217,227,235,1,28,29,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,0,6,2,0,23,23,26,28,1,0,24,25,1,0,32,37,1,0,29,31,2,0,11,11,38,
		42,2,0,54,55,57,57,249,0,61,1,0,0,0,2,73,1,0,0,0,4,80,1,0,0,0,6,84,1,0,
		0,0,8,91,1,0,0,0,10,101,1,0,0,0,12,107,1,0,0,0,14,114,1,0,0,0,16,120,1,
		0,0,0,18,122,1,0,0,0,20,128,1,0,0,0,22,135,1,0,0,0,24,137,1,0,0,0,26,140,
		1,0,0,0,28,158,1,0,0,0,30,181,1,0,0,0,32,183,1,0,0,0,34,185,1,0,0,0,36,
		187,1,0,0,0,38,189,1,0,0,0,40,191,1,0,0,0,42,200,1,0,0,0,44,202,1,0,0,
		0,46,204,1,0,0,0,48,207,1,0,0,0,50,212,1,0,0,0,52,222,1,0,0,0,54,230,1,
		0,0,0,56,238,1,0,0,0,58,60,3,2,1,0,59,58,1,0,0,0,60,63,1,0,0,0,61,59,1,
		0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,61,1,0,0,0,64,65,5,0,0,1,65,1,1,0,
		0,0,66,74,3,4,2,0,67,74,3,20,10,0,68,74,3,22,11,0,69,74,3,12,6,0,70,74,
		3,8,4,0,71,74,3,14,7,0,72,74,3,46,23,0,73,66,1,0,0,0,73,67,1,0,0,0,73,
		68,1,0,0,0,73,69,1,0,0,0,73,70,1,0,0,0,73,71,1,0,0,0,73,72,1,0,0,0,74,
		3,1,0,0,0,75,81,3,10,5,0,76,81,3,6,3,0,77,81,3,18,9,0,78,81,3,26,13,0,
		79,81,3,24,12,0,80,75,1,0,0,0,80,76,1,0,0,0,80,77,1,0,0,0,80,78,1,0,0,
		0,80,79,1,0,0,0,81,82,1,0,0,0,82,83,5,4,0,0,83,5,1,0,0,0,84,85,5,56,0,
		0,85,87,5,5,0,0,86,88,3,52,26,0,87,86,1,0,0,0,87,88,1,0,0,0,88,89,1,0,
		0,0,89,90,5,6,0,0,90,7,1,0,0,0,91,92,5,16,0,0,92,93,5,56,0,0,93,95,5,5,
		0,0,94,96,3,54,27,0,95,94,1,0,0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,98,5,
		6,0,0,98,99,3,40,20,0,99,9,1,0,0,0,100,102,5,45,0,0,101,100,1,0,0,0,101,
		102,1,0,0,0,102,103,1,0,0,0,103,104,5,56,0,0,104,105,3,38,19,0,105,106,
		3,28,14,0,106,11,1,0,0,0,107,108,5,46,0,0,108,109,3,28,14,0,109,112,3,
		40,20,0,110,111,5,47,0,0,111,113,3,16,8,0,112,110,1,0,0,0,112,113,1,0,
		0,0,113,13,1,0,0,0,114,115,5,48,0,0,115,116,3,28,14,0,116,117,3,40,20,
		0,117,15,1,0,0,0,118,121,3,40,20,0,119,121,3,12,6,0,120,118,1,0,0,0,120,
		119,1,0,0,0,121,17,1,0,0,0,122,123,5,52,0,0,123,124,3,28,14,0,124,19,1,
		0,0,0,125,129,5,55,0,0,126,129,3,44,22,0,127,129,3,28,14,0,128,125,1,0,
		0,0,128,126,1,0,0,0,128,127,1,0,0,0,129,130,1,0,0,0,130,133,5,15,0,0,131,
		134,3,40,20,0,132,134,3,4,2,0,133,131,1,0,0,0,133,132,1,0,0,0,134,21,1,
		0,0,0,135,136,3,48,24,0,136,23,1,0,0,0,137,138,5,51,0,0,138,139,5,57,0,
		0,139,25,1,0,0,0,140,141,5,53,0,0,141,142,5,56,0,0,142,143,5,11,0,0,143,
		144,3,42,21,0,144,27,1,0,0,0,145,146,6,14,-1,0,146,159,3,42,21,0,147,159,
		5,56,0,0,148,159,3,6,3,0,149,150,5,5,0,0,150,151,3,28,14,0,151,152,5,6,
		0,0,152,159,1,0,0,0,153,154,5,13,0,0,154,159,3,28,14,6,155,156,3,32,16,
		0,156,157,3,28,14,5,157,159,1,0,0,0,158,145,1,0,0,0,158,147,1,0,0,0,158,
		148,1,0,0,0,158,149,1,0,0,0,158,153,1,0,0,0,158,155,1,0,0,0,159,178,1,
		0,0,0,160,161,10,4,0,0,161,162,3,30,15,0,162,163,3,28,14,5,163,177,1,0,
		0,0,164,165,10,3,0,0,165,166,3,32,16,0,166,167,3,28,14,4,167,177,1,0,0,
		0,168,169,10,2,0,0,169,170,3,34,17,0,170,171,3,28,14,3,171,177,1,0,0,0,
		172,173,10,1,0,0,173,174,3,36,18,0,174,175,3,28,14,2,175,177,1,0,0,0,176,
		160,1,0,0,0,176,164,1,0,0,0,176,168,1,0,0,0,176,172,1,0,0,0,177,180,1,
		0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,29,1,0,0,0,180,178,1,0,0,0,181,
		182,7,0,0,0,182,31,1,0,0,0,183,184,7,1,0,0,184,33,1,0,0,0,185,186,7,2,
		0,0,186,35,1,0,0,0,187,188,7,3,0,0,188,37,1,0,0,0,189,190,7,4,0,0,190,
		39,1,0,0,0,191,195,5,9,0,0,192,194,3,2,1,0,193,192,1,0,0,0,194,197,1,0,
		0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,198,1,0,0,0,197,195,1,0,0,0,198,
		199,5,10,0,0,199,41,1,0,0,0,200,201,7,5,0,0,201,43,1,0,0,0,202,203,5,43,
		0,0,203,45,1,0,0,0,204,205,5,20,0,0,205,47,1,0,0,0,206,208,5,45,0,0,207,
		206,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,210,5,44,0,0,210,211,3,
		50,25,0,211,49,1,0,0,0,212,217,5,9,0,0,213,216,9,0,0,0,214,216,3,50,25,
		0,215,213,1,0,0,0,215,214,1,0,0,0,216,219,1,0,0,0,217,218,1,0,0,0,217,
		215,1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,221,5,10,0,0,221,51,1,
		0,0,0,222,227,3,28,14,0,223,224,5,12,0,0,224,226,3,28,14,0,225,223,1,0,
		0,0,226,229,1,0,0,0,227,228,1,0,0,0,227,225,1,0,0,0,228,53,1,0,0,0,229,
		227,1,0,0,0,230,235,3,56,28,0,231,232,5,12,0,0,232,234,3,56,28,0,233,231,
		1,0,0,0,234,237,1,0,0,0,235,236,1,0,0,0,235,233,1,0,0,0,236,55,1,0,0,0,
		237,235,1,0,0,0,238,241,5,56,0,0,239,240,5,11,0,0,240,242,3,42,21,0,241,
		239,1,0,0,0,241,242,1,0,0,0,242,57,1,0,0,0,20,61,73,80,87,95,101,112,120,
		128,133,158,176,178,195,207,215,217,227,235,241
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
