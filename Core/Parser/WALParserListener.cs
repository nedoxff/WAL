//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from WALParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="WALParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface IWALParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] WALParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] WALParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLine([NotNull] WALParser.LineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLine([NotNull] WALParser.LineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] WALParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] WALParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.functionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallStatement([NotNull] WALParser.FunctionCallStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.functionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallStatement([NotNull] WALParser.FunctionCallStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.functionDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclarationStatement([NotNull] WALParser.FunctionDeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.functionDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclarationStatement([NotNull] WALParser.FunctionDeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentStatement([NotNull] WALParser.AssignmentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentStatement([NotNull] WALParser.AssignmentStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] WALParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] WALParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] WALParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] WALParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.elseIfStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatement([NotNull] WALParser.ElseIfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.elseIfStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatement([NotNull] WALParser.ElseIfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] WALParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] WALParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.timedBlockStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimedBlockStatement([NotNull] WALParser.TimedBlockStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.timedBlockStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimedBlockStatement([NotNull] WALParser.TimedBlockStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.unsafeStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnsafeStatement([NotNull] WALParser.UnsafeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.unsafeStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnsafeStatement([NotNull] WALParser.UnsafeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportStatement([NotNull] WALParser.ImportStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportStatement([NotNull] WALParser.ImportStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.constantDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantDeclarationStatement([NotNull] WALParser.ConstantDeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.constantDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantDeclarationStatement([NotNull] WALParser.ConstantDeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] WALParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] WALParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantExpression([NotNull] WALParser.ConstantExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantExpression([NotNull] WALParser.ConstantExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] WALParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] WALParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryBooleanExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryBooleanExpression([NotNull] WALParser.BinaryBooleanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryBooleanExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryBooleanExpression([NotNull] WALParser.BinaryBooleanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] WALParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] WALParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] WALParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] WALParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryCompareExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryCompareExpression([NotNull] WALParser.BinaryCompareExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryCompareExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryCompareExpression([NotNull] WALParser.BinaryCompareExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryMultiplyExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryMultiplyExpression([NotNull] WALParser.BinaryMultiplyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryMultiplyExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryMultiplyExpression([NotNull] WALParser.BinaryMultiplyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryAddExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryAddExpression([NotNull] WALParser.UnaryAddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryAddExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryAddExpression([NotNull] WALParser.UnaryAddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryAddExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryAddExpression([NotNull] WALParser.BinaryAddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryAddExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryAddExpression([NotNull] WALParser.BinaryAddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.multiplyOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplyOperators([NotNull] WALParser.MultiplyOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.multiplyOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplyOperators([NotNull] WALParser.MultiplyOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.addOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddOperators([NotNull] WALParser.AddOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.addOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddOperators([NotNull] WALParser.AddOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.compareOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompareOperators([NotNull] WALParser.CompareOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.compareOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompareOperators([NotNull] WALParser.CompareOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.booleanOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanOperators([NotNull] WALParser.BooleanOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.booleanOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanOperators([NotNull] WALParser.BooleanOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.assignmentOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentOperators([NotNull] WALParser.AssignmentOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.assignmentOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentOperators([NotNull] WALParser.AssignmentOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] WALParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] WALParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] WALParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] WALParser.ConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.timeBlockEvent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeBlockEvent([NotNull] WALParser.TimeBlockEventContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.timeBlockEvent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeBlockEvent([NotNull] WALParser.TimeBlockEventContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComment([NotNull] WALParser.CommentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComment([NotNull] WALParser.CommentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.unsafeBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnsafeBlock([NotNull] WALParser.UnsafeBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.unsafeBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnsafeBlock([NotNull] WALParser.UnsafeBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.genericBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericBlock([NotNull] WALParser.GenericBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.genericBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericBlock([NotNull] WALParser.GenericBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionList([NotNull] WALParser.ExpressionListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionList([NotNull] WALParser.ExpressionListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.functionArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionArgumentList([NotNull] WALParser.FunctionArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.functionArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionArgumentList([NotNull] WALParser.FunctionArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="WALParser.functionArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionArgument([NotNull] WALParser.FunctionArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="WALParser.functionArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionArgument([NotNull] WALParser.FunctionArgumentContext context);
}
