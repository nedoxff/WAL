//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from WALParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="WALParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface IWALParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] WALParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLine([NotNull] WALParser.LineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] WALParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.functionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallStatement([NotNull] WALParser.FunctionCallStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.functionDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDeclarationStatement([NotNull] WALParser.FunctionDeclarationStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentStatement([NotNull] WALParser.AssignmentStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] WALParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] WALParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.elseIfStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseIfStatement([NotNull] WALParser.ElseIfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] WALParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.timedBlockStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTimedBlockStatement([NotNull] WALParser.TimedBlockStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.unsafeStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnsafeStatement([NotNull] WALParser.UnsafeStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitImportStatement([NotNull] WALParser.ImportStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.constantDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantDeclarationStatement([NotNull] WALParser.ConstantDeclarationStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpression([NotNull] WALParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantExpression([NotNull] WALParser.ConstantExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpression([NotNull] WALParser.IdentifierExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>binaryBooleanExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryBooleanExpression([NotNull] WALParser.BinaryBooleanExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallExpression([NotNull] WALParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotExpression([NotNull] WALParser.NotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>binaryCompareExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryCompareExpression([NotNull] WALParser.BinaryCompareExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>binaryMultiplyExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryMultiplyExpression([NotNull] WALParser.BinaryMultiplyExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>unaryAddExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryAddExpression([NotNull] WALParser.UnaryAddExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>binaryAddExpression</c>
	/// labeled alternative in <see cref="WALParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryAddExpression([NotNull] WALParser.BinaryAddExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.multiplyOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplyOperators([NotNull] WALParser.MultiplyOperatorsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.addOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddOperators([NotNull] WALParser.AddOperatorsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.compareOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompareOperators([NotNull] WALParser.CompareOperatorsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.booleanOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanOperators([NotNull] WALParser.BooleanOperatorsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.assignmentOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentOperators([NotNull] WALParser.AssignmentOperatorsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] WALParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] WALParser.ConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.timeBlockEvent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTimeBlockEvent([NotNull] WALParser.TimeBlockEventContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComment([NotNull] WALParser.CommentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.unsafeBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnsafeBlock([NotNull] WALParser.UnsafeBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.genericBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGenericBlock([NotNull] WALParser.GenericBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionList([NotNull] WALParser.ExpressionListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.functionArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionArgumentList([NotNull] WALParser.FunctionArgumentListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="WALParser.functionArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionArgument([NotNull] WALParser.FunctionArgumentContext context);
}
